[1mdiff --git a/src/pyHomework/Utils.py b/src/pyHomework/Utils.py[m
[1mindex 155df26..d874bf4 100644[m
[1m--- a/src/pyHomework/Utils.py[m
[1m+++ b/src/pyHomework/Utils.py[m
[36m@@ -5,8 +5,6 @@[m [mimport StringIO, json[m
 import re, os, yaml[m
 import collections[m
 import sys[m
[31m-sys.path.append("../externals/pyoptiontree")[m
[31m-import pyoptiontree[m
 [m
 class EvalTemplate(Template):[m
     delimiter = '~'[m
[36m@@ -152,12 +150,7 @@[m [mclass LatexLabels(dict):[m
 [m
             tag = tag.strip()[m
 [m
[31m-            [m
[31m-            # the pyoptiontree is sensitive to non-alpha numeric characters in the keys[m
[31m-            # so we will just replace all special characters with an underscore[m
             key = label[m
[31m-            key = key.replace(":","_")[m
[31m-            key = key.replace("@","_")[m
             self[key] = tag[m
 [m
 def toBool( v ):[m
[36m@@ -205,53 +198,6 @@[m [mdef FindPairs( s, beg_str, end_str):[m
 [m
     return pairs[m
 [m
[31m-def interpolate(self, fromtree = None):[m
[31m-    if fromtree == None:[m
[31m-        fromtree = self[m
[31m-[m
[31m-    for (name, branch) in self.items():[m
[31m-        if isinstance( branch, str ):[m
[31m-            pairs = FindPairs(branch, '${','}')[m
[31m-            orig = branch[m
[31m-            for i in range(len(pairs)):[m
[31m-                pair = pairs[i][m
[31m-                link = branch[ pair[1][0]:pair[1][1]+1 ][m
[31m-                repl = fromtree( link )[m
[31m-                branch = branch[:pair[0][0]] + repl + branch[pair[0][1]+1:][m
[31m-[m
[31m-                shift = (pair[0][1]+1 - pair[0][0]) - len(repl)[m
[31m-                for j in range(i+1,len(pairs)):[m
[31m-                    pairs[j][0][0] -= shift[m
[31m-                    pairs[j][0][1] -= shift[m
[31m-                    pairs[j][1][0] -= shift[m
[31m-                    pairs[j][1][1] -= shift[m
[31m-[m
[31m-                self.set(name,branch)[m
[31m-[m
[31m-                if branch != orig:[m
[31m-                  pass[m
[31m-                  # recursive interpolation is going to be tricky here. not ready yet.[m
[31m-                  #self.interpolate( fromtree(link + "/.." ) )[m
[31m-[m
[31m-        elif isinstance( branch, pyoptiontree.PyOptionTree):[m
[31m-            branch.interpolate()[m
[31m-pyoptiontree.PyOptionTree.__dict__['interpolate'] = interpolate[m
[31m-[m
[31m-def extractDict( tree ):[m
[31m-  d = dict()[m
[31m-  for (name, branch) in tree.items():[m
[31m-    try:[m
[31m-      key = int(name)[m
[31m-    except:[m
[31m-      key = name[m
[31m-[m
[31m-    if isinstance( branch, pyoptiontree.PyOptionTree):[m
[31m-      d[key] = extractDict( branch )[m
[31m-    else:[m
[31m-      d[key] = branch[m
[31m-[m
[31m-  return d[m
[31m-[m
 def dict2list( d ):[m
     l = [None]*len( d )[m
     for k in d:[m
[36m@@ -261,84 +207,72 @@[m [mdef dict2list( d ):[m
 [m
 class Quiz(object):[m
     def __init__(self):[m
[31m-        self.quiz_tree = None[m
[31m-        self.quiz_namespace = None[m
[32m+[m[32m        self.quiz_data = None[m
         self.correct_answer_chars = "*^!@"[m
         self.randomize_answers = True[m
[31m-        self.interpolate = True[m
         self.latex_labels = LatexLabels()[m
 [m
     def load(self, obj):[m
         self.filename = "unknown"[m
[31m-        quiz_dict = dict()[m
[32m+[m[32m        self.quiz_data = dict()[m
         if isinstance( obj, str ):[m
             self.filename = obj[m
             if os.path.isfile( obj ):[m
                 with open(obj) as f:[m
[31m-                    quiz_dict = yaml.load( f )[m
[32m+[m[32m                    self.quiz_data = yaml.load( f )[m
             else:[m
                 raise IOError( "argument %s does not seem to be a file" % self.filename )[m
 [m
         if isinstance( obj, dict ):[m
[31m-            quiz_dict = obj[m
[32m+[m[32m            self.quiz_data = obj[m
 [m
 [m
[31m-        if 'latex' in quiz_dict:[m
[31m-            if 'aux' in quiz_dict['latex']:[m
[31m-                aux_file =  os.path.join( os.path.dirname(obj), quiz_dict['latex']['aux']  )[m
[32m+[m[32m        # load latex keys if available[m
[32m+[m[32m        if 'latex' in self.quiz_data:[m
[32m+[m[32m            if 'aux' in self.quiz_data['latex']:[m
[32m+[m[32m                aux_file =  os.path.join( os.path.dirname(obj), self.quiz_data['latex']['aux']  )[m
                 self.latex_labels.parse( aux_file )[m
 [m
[31m-        for key in self.latex_labels:[m
[31m-          pass[m
[31m-[m
[31m-        if not 'vars' in quiz_dict:[m
[31m-          quiz_dict['vars'] = dict()[m
[31m-        quiz_dict['vars'].update( self.latex_labels )[m
[31m-[m
[31m-        [m
[31m-        self.quiz_tree = pyoptiontree.PyOptionTree()[m
[31m-        for (key,val) in Flattener.flatten(quiz_dict, "", "/").items():[m
[31m-          self.quiz_tree.set(key, val)[m
[31m-[m
[31m-        if self.interpolate:[m
[31m-          self.quiz_tree.interpolate()[m
[31m-[m
         self.detect_question_types()[m
 [m
     def detect_question_types(self):[m
[31m-        for (qnum,question) in self.quiz_tree("questions").items():[m
[31m-            qnum = int(qnum) + 1[m
[32m+[m[32m      for i in xrange(len(self.quiz_data["questions"])):[m
[32m+[m[32m            question = self.quiz_data["questions"][i][m
 [m
             # if the question has an answer that is a subtree, we need to figure out what kind of question it is[m
[31m-            if isinstance( question.get("answer", None), pyoptiontree.PyOptionTree):[m
[32m+[m[32m            if isinstance( question.get("answer", None), dict ):[m
 [m
                 # if the answer has an element named "value", then the question is numerical[m
                 if question.get("answer").get("value", None):[m
[31m-                    question.set("type", "NUM")[m
[32m+[m[32m                    question["type"] = "NUM"[m
 [m
                 # if the answer has an element named "choices", then the question is multiple choice[m
                 if question.get("answer").get("choices", None):[m
[31m-                    num_correct_answers = 0[m
[31m-                    for (lbl,ans) in question.get("answer").get("choices").items():[m
[31m-                        if( self.correct_answer_chars.find( ans[0] ) >= 0 ):[m
[31m-                            num_correct_answers += 1[m
[31m-[m
[31m-                    if( num_correct_answers == 0 ):[m
[31m-                        print "WARNING: question %d in file '%s' appears to be a multiple-choice question, but no correct answer was selected." % (qnum,self.filename)[m
[31m-                        question.set("type", "MC")[m
[31m-                    elif( num_correct_answers == 1 ):[m
[31m-                        question.set("type","MC")[m
[31m-                    else:[m
[31m-                        question.set("type","MA")[m
[32m+[m[32m                  # we need to see how many correct answers there are...[m
[32m+[m[32m                  num_correct_answers = 0[m
[32m+[m[32m                  for ans in question.get("answer").get("choices"):[m
[32m+[m[32m                    if( self.correct_answer_chars.find( ans[0] ) >= 0 ):[m
[32m+[m[32m                      num_correct_answers += 1[m
[32m+[m
[32m+[m[32m                  # if there weren't any correct answers, there was probably an error[m
[32m+[m[32m                  if( num_correct_answers == 0 ):[m
[32m+[m[32m                    print "WARNING: question %d in file '%s' appears to be a multiple-choice question, but no correct answer was selected." % (i+1,self.filename)[m
[32m+[m[32m                    question["type"] = "MC"[m
[32m+[m[32m                  # if there was only one answer, this is a multiple choic[m
[32m+[m[32m                  elif( num_correct_answers == 1 ):[m
[32m+[m[32m                    question["type"] = "MC"[m
[32m+[m[32m                  # otherwise, it is a multiple-answer[m
[32m+[m[32m                  else:[m
[32m+[m[32m                    question["type"] = "MA"[m
 [m
 [m
                 # if the answer has an element named "ordered", then the question is an ordering question[m
                 if question.get("answer").get("ordered", None):[m
[31m-                  question.set("type", "ORD")[m
[32m+[m[32m                  question["type"] = "ORD"[m
 [m
 [m
             # the answer is a bool, so the question is True/False[m
             if isBool( question.get("answer", None) ):[m
[31m-                question.set("type", "TF")[m
[32m+[m[32m                question["type"] = "TF"[m
 [m
 [m
[1mdiff --git a/src/pyHomework/__init__.py b/src/pyHomework/__init__.py[m
[1mindex b492474..e69de29 100755[m
[1m--- a/src/pyHomework/__init__.py[m
[1m+++ b/src/pyHomework/__init__.py[m
[36m@@ -1,322 +0,0 @@[m
[31m-#! /usr/bin/env python[m
[31m-[m
[31m-import sys, os, os.path, subprocess, shlex[m
[31m-[m
[31m-import time[m
[31m-import tempfile[m
[31m-import shutil[m
[31m-import yaml[m
[31m-import sympy as sy[m
[31m-import sympy.assumptions as assumptions[m
[31m-import numpy as np[m
[31m-import pint  as pn[m
[31m-[m
[31m-from mako.template import Template[m
[31m-[m
[31m-units = pn.UnitRegistry()[m
[31m-[m
[31m-class HomeworkAssignment:[m
[31m-[m
[31m-  def __init__(self):[m
[31m-    self.latex_template= r'''[m
[31m-\documentclass[letterpaper,10pt]{article}[m
[31m-\usepackage{amsmath}[m
[31m-\usepackage{amsfonts}[m
[31m-\usepackage{amssymb}[m
[31m-\usepackage{graphicx}[m
[31m-\usepackage[per-mode=symbol]{siunitx}[m
[31m-\usepackage[left=1in,right=1in,top=1in,bottom=1in]{geometry}[m
[31m-\usepackage{fancyhdr}[m
[31m-\usepackage{enumitem}[m
[31m-\usepackage[ampersand]{easylist}[m
[31m-\ListProperties(Numbers1=a,Numbers2=l,Hide2=1,Progressive*=0.5cm,Hang=true,Space2=0.2cm,Space1=0.4cm,Space1*=0.4cm)[m
[31m-[m
[31m-\setlength{\headheight}{0.5in}[m
[31m-\pagestyle{fancyplain}[m
[31m-\fancyhead[L]{${config['LH']}}[m
[31m-\fancyhead[C]{${config['CH']}}[m
[31m-\fancyhead[R]{${config['RH']}}[m
[31m-\fancyfoot[L]{${config['LF']}}[m
[31m-\fancyfoot[C]{${config['CF']}}[m
[31m-\fancyfoot[R]{${config['RF']}}[m
[31m-\renewcommand{\headrulewidth}{0pt}[m
[31m-[m
[31m-\setlength{\parindent}{0cm}[m
[31m-[m
[31m-\title{${config['title']}}[m
[31m-\author{}[m
[31m-\date{}[m
[31m-[m
[31m-\begin{document}[m
[31m-\maketitle[m
[31m-[m
[31m-\begin{enumerate}[m
[31m-%for q in config['questions']:[m
[31m-\begin{minipage}{\linewidth}[m
[31m-  \item ${q['star']} \label{${q['label']}} ${q['text']}[m
[31m-    %if 'parts' in q:[m
[31m-    \begin{enumerate}[m
[31m-      %for p in q['parts']:[m
[31m-      \item ${p['star']} \label{${p['label']}} ${p['text']}[m
[31m-      %endfor[m
[31m-    \end{enumerate}[m
[31m-    %endif[m
[31m-\end{minipage}[m
[31m-%endfor[m
[31m-\end{enumerate}[m
[31m-[m
[31m-[m
[31m-\clearpage[m
[31m-[m
[31m-%for f in config['figures']:[m
[31m-\begin{figure}[m
[31m-\includegraphics[${f['options']}]{${f['filename']}}[m
[31m-\caption{ \label{${f['label']}} ${f['caption']}}[m
[31m-\end{figure}[m
[31m-%endfor[m
[31m-[m
[31m-\end{document}[m
[31m-'''[m
[31m-    self.config = { 'title' : "UNKNOWN"[m
[31m-                  , 'LH' : ""[m
[31m-                  , 'CH' : ""[m
[31m-                  , 'RH' : ""[m
[31m-                  , 'LF' : ""[m
[31m-                  , 'CF' : r"\thepage"[m
[31m-                  , 'RF' : r"powered by \LaTeX"[m
[31m-                  , 'questions' : [ ][m
[31m-                  , 'figures' : [ ][m
[31m-                  , 'quiz_questions' : [ ][m
[31m-                  , 'latex_aux' : None[m
[31m-                  }[m
[31m-[m
[31m-    self.questions = self.config['questions'][m
[31m-    self.figures   = self.config['figures'][m
[31m-    self.quiz_questions = self.config['quiz_questions'][m
[31m-[m
[31m-    self.blank_question = {'text' : "", 'label' : "", 'star' : "" }[m
[31m-    self.blank_part     = self.blank_question.copy()[m
[31m-    self.blank_figure   = {'filename' : "", 'caption' : "", 'label' : "", 'options' : "" }[m
[31m-    self.blank_quiz_question = {'text' : "", 'answer' : {}, 'instructions' : "" }[m
[31m-[m
[31m-[m
[31m-    self.template_engine = Template( self.latex_template )[m
[31m-[m
[31m-  def write_latex(self, filename=None):[m
[31m-    if not filename:[m
[31m-        filename = "/dev/stdout"[m
[31m-[m
[31m-    with open(filename, 'w') as f:[m
[31m-      f.write( self.template_engine.render( config=self.config ) )[m
[31m-[m
[31m-    basename = os.path.splitext(filename)[0][m
[31m-    self.config['latex_aux'] = basename+'.aux'[m
[31m-[m
[31m-  def write_quiz(self, filename="quiz.yaml"):[m
[31m-    with open(filename,'w') as f:[m
[31m-      # this will write a yaml file that can be processed by BbQuiz[m
[31m-      for q in self.quiz_questions:[m
[31m-        if 'unit' in q and ("%s"%q['unit']) != 'dimensionless':[m
[31m-          q['text'] += 'Give your answer in %s. ' % q['unit'][m
[31m-        if 'instructions' in q:[m
[31m-          q['text'] += q['instructions'][m
[31m-[m
[31m-      tree = {'questions' : self.quiz_questions}[m
[31m-      if self.config['latex_aux']:[m
[31m-        tree.update({ 'latex' : {'aux' : self.config['latex_aux']}})[m
[31m-      f.write( yaml.dump(tree, default_flow_style=False) )[m
[31m-[m
[31m-  def build_PDF( self, basename="main"):[m
[31m-    basename = os.path.splitext(basename)[0][m
[31m-    scratch = tempfile.mkdtemp()[m
[31m-[m
[31m-    self.write_latex(os.path.join(scratch,basename+".tex") )[m
[31m-[m
[31m-    # copy all the figure files[m
[31m-    for figure in self.figures:[m
[31m-      shutil.copy( figure['filename'], os.path.join(scratch,figure['filename']) )[m
[31m-[m
[31m-    with open("/dev/stdout",'w') as FNULL:[m
[31m-      ret = subprocess.call(shlex.split( 'latexmk -pdf '+basename), cwd=scratch, stdout=sys.stdout, stderr=subprocess.STDOUT)[m
[31m-[m
[31m-    for ext in ("pdf", "aux", "tex"):[m
[31m-      filename = "%s.%s"%(basename,ext)[m
[31m-      shutil.copy( os.path.join(scratch,filename), filename)[m
[31m-[m
[31m-  def build_quiz(self, basename="quiz"):[m
[31m-    basename = os.path.splitext(basename)[0][m
[31m-[m
[31m-    self.write_quiz(basename+".yaml")[m
[31m-[m
[31m-    with open("/dev/stdout",'w') as FNULL:[m
[31m-      ret = subprocess.call(shlex.split( 'BbQuiz.py '+basename+".yaml"), stdout=sys.stdout, stderr=subprocess.STDOUT)[m
[31m-[m
[31m-    [m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-  def add_question(self):[m
[31m-    '''Add a new (empyt) question to the stack.'''[m
[31m-    self.questions.append( self.blank_question.copy() )[m
[31m-    self.questions[-1]['label'] = r"prob_%d" % len(self.questions)[m
[31m-[m
[31m-  def add_part(self):[m
[31m-    if not 'parts' in self.questions[-1]:[m
[31m-      self.questions[-1]['parts'] = list()[m
[31m-    self.questions[-1]['parts'].append( self.blank_part.copy() )[m
[31m-    self.questions[-1]['parts'][-1]['label']  = r"prob_%d_%d" % (len(self.questions), len(self.questions[-1]['parts']))[m
[31m-    [m
[31m-  def get_ref(self):[m
[31m-    if 'parts' in self.questions[-1]:[m
[31m-      return self.questions[-1]['parts'][-1]['label'][m
[31m-    else:[m
[31m-      return self.questions[-1]['label'][m
[31m-[m
[31m-  def add_text(self,text=""):[m
[31m-    if 'parts' in self.questions[-1]:[m
[31m-      self.questions[-1]['parts'][-1]['text'] += text + " "[m
[31m-    else:[m
[31m-      self.questions[-1]['text']  += text + " "[m
[31m-[m
[31m-[m
[31m-  def add_quiz_question(self):[m
[31m-    self.quiz_questions.append( self.blank_quiz_question.copy() )[m
[31m-    if len(self.questions):[m
[31m-      self.quiz_questions[-1]['text'] = "For problem #${/vars/%s}: "%self.get_ref()[m
[31m-[m
[31m-  def quiz_add_text(self,text=""):[m
[31m-    text = text.replace('\n', ' ').replace('\r', ' ').replace('\t', ' ')[m
[31m-    self.quiz_questions[-1]['text']  += text + " "[m
[31m-[m
[31m-  def quiz_add_unit(self,unit=None):[m
[31m-    if unit:[m
[31m-      self.quiz_questions[-1]['unit'] = self.get_unit( unit )[m
[31m-    else:[m
[31m-      if 'unit' in self.quiz_questions[-1]:[m
[31m-        del self.quiz_questions[-1]['unit'][m
[31m-[m
[31m-  def quiz_add_instruction(self,text):[m
[31m-    self.quiz_questions[-1]['instructions'] += text[m
[31m-[m
[31m-  def quiz_add_answer(self, answer = None):[m
[31m-    self.quiz_questions[-1]['answer'] = answer[m
[31m-[m
[31m-  def quiz_set_answer_value(self, value):[m
[31m-    self.quiz_add_answer( {'raw' : str(value), 'value' : self.get_value( value ), 'unit' : self.get_unit( value ) } )[m
[31m-    self.quiz_add_unit( value )[m
[31m-[m
[31m-[m
[31m-  def add_star(self, text="*"):[m
[31m-    '''Add a star (*) to the current question or part.'''[m
[31m-    if 'parts' in self.questions[-1]:[m
[31m-      self.questions[-1]['parts'][-1]['star'] = text[m
[31m-    else:[m
[31m-      self.questions[-1]['star'] = text[m
[31m-[m
[31m-  def add_vars(self,vars={}):[m
[31m-    self.config.update( vars )[m
[31m-[m
[31m-  def add_figure(self,filename=""):[m
[31m-    self.figures.append( self.blank_figure.copy() )[m
[31m-    self.figures[-1]['filename'] = filename[m
[31m-[m
[31m-  def add_figure_data(self,data,text=""):[m
[31m-    if len(self.figures) > 0:[m
[31m-      self.figures[-1][data] = text[m
[31m-[m
[31m-[m
[31m-  def get_unit(self, x=None):[m
[31m-    u = ""[m
[31m-    if x:[m
[31m-      if isinstance( x, str ):[m
[31m-        u = x[m
[31m-[m
[31m-      if isinstance( x, units.Quantity ):[m
[31m-        u = str(x.units)[m
[31m-[m
[31m-    return u[m
[31m-[m
[31m-  def get_value(self, x=None):[m
[31m-    if isinstance( x, str ):[m
[31m-      return x[m
[31m-[m
[31m-    v = 0[m
[31m-    if x:[m
[31m-      if isinstance( x, units.Quantity ):[m
[31m-        v = x.magnitude[m
[31m-[m
[31m-    return to_sigfig(v,3)[m
[31m-[m
[31m-def get_semester():[m
[31m-  month = int(time.strftime("%m"))[m
[31m-  year  =     time.strftime("%Y")[m
[31m-  semester = "Spring" if month < 6 else "Fall"[m
[31m-[m
[31m-  return (semester,year)[m
[31m-[m
[31m-[m
[31m-def to_sigfig(x,p):[m
[31m-    """[m
[31m-    This code was taken from here:[m
[31m-    http://randlet.com/blog/python-significant-figures-format/[m
[31m-[m
[31m-    returns a string representation of x formatted with a precision of p[m
[31m-    Based on the webkit javascript implementation taken from here:[m
[31m-    https://code.google.com/p/webkit-mirror/source/browse/JavaScriptCore/kjs/number_object.cpp[m
[31m-    """[m
[31m-[m
[31m-[m
[31m-    import math[m
[31m-    x = float(x)[m
[31m-[m
[31m-    if x == 0.:[m
[31m-        return "0." + "0"*(p-1)[m
[31m-[m
[31m-    out = [][m
[31m-[m
[31m-    if x < 0:[m
[31m-        out.append("-")[m
[31m-        x = -x[m
[31m-[m
[31m-    e = int(math.log10(x))[m
[31m-    tens = math.pow(10, e - p + 1)[m
[31m-    n = math.floor(x/tens)[m
[31m-[m
[31m-    if n < math.pow(10, p - 1):[m
[31m-        e = e -1[m
[31m-        tens = math.pow(10, e - p+1)[m
[31m-        n = math.floor(x / tens)[m
[31m-[m
[31m-    if abs((n + 1.) * tens - x) <= abs(n * tens -x):[m
[31m-        n = n + 1[m
[31m-[m
[31m-    if n >= math.pow(10,p):[m
[31m-        n = n / 10.[m
[31m-        e = e + 1[m
[31m-[m
[31m-[m
[31m-    m = "%.*g" % (p, n)[m
[31m-[m
[31m-    if e < -2 or e >= p:[m
[31m-        out.append(m[0])[m
[31m-        if p > 1:[m
[31m-            out.append(".")[m
[31m-            out.extend(m[1:p])[m
[31m-        out.append('e')[m
[31m-        if e > 0:[m
[31m-            out.append("+")[m
[31m-        out.append(str(e))[m
[31m-    elif e == (p -1):[m
[31m-        out.append(m)[m
[31m-    elif e >= 0:[m
[31m-        out.append(m[:e+1])[m
[31m-        if e+1 < len(m):[m
[31m-            out.append(".")[m
[31m-            out.extend(m[e+1:])[m
[31m-    else:[m
[31m-        out.append("0.")[m
[31m-        out.extend(["0"]*-(e+1))[m
[31m-        out.append(m)[m
[31m-[m
[31m-    return "".join(out)[m
